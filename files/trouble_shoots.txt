<ALTERNATIVE>
<SLIGHT> 菜刀的渲染方式，八卦炉在GUI上的显示和在玩家主手第三人称的显示
<CONFUSE> 星弹的发射位置，魔炮没有冷却和耐久
<BUG> 弹幕击中生物不掉血，弹幕的碰撞体积偏高
<ERROR> (Unexpected)神秘珠无法将人传送至幻想乡
<FATAL> 八卦炉刷物品机制

<In-Game Unsolved>
【方块】
弹幕合成台：模型+贴图

【物品】
贴图不全：清酒桶，和纸，纸垂，玉石B-SSS，勾玉
贴图更换：游荡的灵魂

</In-Game>

<Code>
<Deprecated name=GapBlock.onBlockPlacedBy() deprecation_time="2023/11/3 15:58">
    final String isFirstPlacement = "is_first_placement";
    final String depatureWorld = "depature_world";
    final String depaturePos = "depature_pos";

    final String arrivalWorld = "arrival_world";
    final String arrivalPos = "arrival_pos";

    // 第一次放置时需要判断物品内部是否含有tag，如果没有tag则添加对应的tag
    writeBoolean(stack, isFirstPlacement, true);
    writeString(stack, depatureWorld, worldIn.getDimensionKey().getLocation().toString());
    writeBlockPos(stack, depaturePos, pos.up(1));

    if (!(placer instanceof PlayerEntity)) return;
    PlayerEntity player = (PlayerEntity) placer;

    /* 第一次放置时 is_first_placement 为 true，所以调用这里的runIf(), 增加一个物品，同时将is_first_placement
     * 设置为 false，nbt内部的合并方法会将旧值替换为新值
     */

    if (getNBTBoolean(stack, isFirstPlacement) && !player.isCreative()) {
        stack.grow(1);
        mergeBoolean(stack, isFirstPlacement, false);
        return;
    }

    // runIf(itemStack -> getNBTBoolean(stack, isFirstPlacement) && player.isCreative(), stack, () -> mergeBoolean(stack, isFirstPlacement, false));
    /* 第二次放置时 is_first_placement 为 false，所以调用这里的runIf()，在坐标
     */

    runIf(itemStack -> !getNBTBoolean(stack, isFirstPlacement), stack, () -> {
        TileEntity firstTile = worldIn.getTileEntity(getNBTBlockPos(stack, depaturePos));
        if (firstTile instanceof GapTileEntity && getNBTBlockPos(stack, depaturePos) != BlockPos.ZERO &&
                !Objects.equals(getNBTString(stack, depatureWorld), "NULL")) {
            GapTileEntity depatureGap = (GapTileEntity) firstTile;
            player.sendMessage(new StringTextComponent(depatureGap.getPos().getCoordinatesAsString()), player.getUniqueID());
            depatureGap.setDestinationPos(getNBTBlockPos(stack, depaturePos));
            depatureGap.setDestinationWorld(RegistryKey.getOrCreateKey(Registry.WORLD_KEY,
                    new ResourceLocation(getNBTString(stack, depatureWorld))));
        }

        mergeString(stack, arrivalWorld, worldIn.getDimensionKey().getLocation().toString());
        mergeBlockPos(stack, arrivalPos, pos);
        TileEntity secondTile = worldIn.getTileEntity(pos);

        if (secondTile instanceof GapTileEntity && getNBTBlockPos(stack, depaturePos) != BlockPos.ZERO &&
                !Objects.equals(getNBTString(stack, depatureWorld), "NULL")) {
            GapTileEntity arrivalGap = (GapTileEntity) secondTile;
            arrivalGap.setDestinationPos(pos);
            arrivalGap.setDestinationWorld(worldIn.getDimensionKey());
        }
    });

    // 将物品NBT设置为空，以开始下一次的循环
    stack.setTag(new CompoundNBT());
</Deprecated>
</Code>